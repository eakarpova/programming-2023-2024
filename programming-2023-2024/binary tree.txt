#include <iostream>
#include <vector>

struct Node {
    int data;
    Node* left;
    Node* right;
    Node() : data(0), left(nullptr), right(nullptr) {}
    Node(int data) : data(data), left(nullptr), right(nullptr) {}
    Node(int data, Node* left, Node* right) : data(data), left(left), right(right) {}
};

int findMaxUtil(Node* root, int& max_sum) {
    if (root == NULL) {
        return 0;
    }

    int left_sum = findMaxUtil(root->left, max_sum);
    int right_sum = findMaxUtil(root->right, max_sum);

    max_sum = std::max(max_sum, left_sum + right_sum + root->data);

    return left_sum + right_sum + root->data;
}

int main() {
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);

    int max_sum = 0;
    findMaxUtil(root, max_sum);

    std::cout << "Maximum sum of paths: " << max_sum << std::endl;

    return 0;
}
#include <iostream>
#include <vector>
using namespace std;

// Проверка безопасности размещения ферзя
bool isSafe(vector<vector<int>>& board, int row, int col, int N) {
    // Проверка горизонтали
    for (int i = 0; i < col; i++)
        if (board[row][i] == 1)
            return false;
    // Проверка левой верхней диагонали
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j] == 1)
            return false;
    // Проверка левой нижней диагонали
    for (int i = row, j = col; j >= 0 && i < N; i++, j--)
        if (board[i][j] == 1)
            return false;
    return true;
}

// Рекурсивное размещение ферзей
bool solveNQUtil(vector<vector<int>>& board, int col, int N) {
    if (col == N) {
        // Вывод решения
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                cout << board[i][j] << " ";
            }
            cout << endl;
        }
        cout << endl;
        return true;
    }
    bool res = false;
    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col, N)) {
            board[i][col] = 1;
            res = solveNQUtil(board, col + 1, N) || res;
            board[i][col] = 0; // Backtracking
        }
    }
    return res;
}

// Функция для вывода всех решений
void solveNQueens(int N) {
    vector<vector<int>> board(N, vector<int>(N, 0));
    if (!solveNQUtil(board, 0, N)) {
        cout << "Решения не существует" << endl;
    }
}

int main() {
    int n = 4;
    solveNQueens(n);
    return 0;
}